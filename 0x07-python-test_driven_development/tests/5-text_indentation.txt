======================
5-text_indentation
======================

Text indentation module is the unit test that verifies proper indentation of text

=====================

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
    Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
    Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
    Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
    rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
    stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
    cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
    beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.$
    $
    Quonam modo?$
    $
    Utrum igitur tibi litteram videor an totas paginas commovere?$
    $
    Non autem hoc:$
    $
    igitur ne illud quidem.$
    $
    Fortasse id optimum, sed ubi illud:$
    $
    Plus semper voluptatis?$
    $
    Teneo, inquit, finem illi videri nihil dolere.$
    $
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.$
    $
    Si id dicis, vicimus.$
    $
    Inde sermone vario sex illa a Dipylo stadia confecimus.$
    $
    Sin aliud quid voles, postea.$
    $
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.$
    $
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

TypeError when adding None

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string

ValueError when adding empty string

::

    >>> text_indentation("")
    Traceback (most recent call last):
    ValueError: text cannot be empty

TypeError when adding integer

::

    >>> text_indentation(123)
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding float

::

    >>> text_indentation(1.23)
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding list

::

    >>> text_indentation([])
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding dictionary

::

    >>> text_indentation({})
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding tuple

::

    >>> text_indentation(())
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding boolean

::

    >>> text_indentation(True)
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding custom object

::

    >>> class CustomObject:
    ...     pass
    >>> text_indentation(CustomObject())
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding bytes

::

    >>> text_indentation(b'hello')
    Traceback (most recent call last):
    TypeError: text must be a string

TypeError when adding byte array

::

    >>> text_indentation(bytearray(b'hello'))
    Traceback (most recent call last):
    TypeError: text must be a string
